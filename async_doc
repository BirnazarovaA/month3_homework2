                                        Синхронность и Асинхронность

    Cуществует синхроннoе и асинхронне програмирование.Само слово синхронность озночает как одновременно ,
 но это функция не делает все одновременно оно делает последовательно.Как девушка я приведу пример с готовкой.Например:
 когда мы готовим, что мы делаем?мы же не ложим все ингредиенты сразу синхронно да?.С перва жарим лук ждем пока
 обжариться , мы не можем положить мясо пока не обжариться лук т.е синхронность озночает что 2 строка не может запуститься
 до тех пор пока первая строка не закончит свое выполнение.
    Асинхронность  озночает как не совподение с чем либо во времени  или же неодновременность.Для вызова асинхронности
 есть такая функция как setTimeout.Например:
 console.log('Hallo');
 console.log('World');
 этот код  консоль выведит последовательно,а если сюда же между двумя консолями  добавим setTimeout
 console.log('Hallo');
 setTimeout((){
 console.log('I live')
 },5000);
 console.log('World');
 и после мы передаем количество мили секунд  ну например 5000 т.е это 5секунд.И мы получим с перва два консоль лога потом
 только через 5секунд setTimeout. Вэтом коде все что находиться в синхронном режиме выполняется сразу же.А то место что
 мы регистрируем асинхронность не блокируется , а спустя через некоторое время вызывается.Возникает вопрос почему поток
 не блокируется?Причина этого является простой концепт как Event Loop.

                                            Event Loop
    Визуальный процесс можно изоброзить так: Call Stack Представляет собой поток выполнения кода JavaScript. Call Stack
 вызовов отвечает за отслеживание всех операций в очереди, которые должны быть выполнены. При завершении очереди она
 извлекается из Call Stacka.Т.е синхронные извлекаются а асинхронное (setTimeout) после регистрации Call Stack
 поподает в Web API, где ожидает до указанного времени, чтобы отправить эту операцию в обработку.После оно закидывает в
 очередь событий в Callback.Где работает цикл который называется Event Loop.Цикл событий постоянно проверяет, пуст ли
 Call Stack вызовов. Если он пуст, новые функции добавляются из очереди событий. Если это не так, то выполняется текущий
 вызов функции.


